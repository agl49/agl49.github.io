{"version":3,"file":"C14HztRR.js","sources":["../../../../../../node_modules/svelte/src/internal/client/reactivity/props.js"],"sourcesContent":["/** @import { Source } from './types.js' */\nimport { DEV } from 'esm-env';\nimport {\n\tPROPS_IS_BINDABLE,\n\tPROPS_IS_IMMUTABLE,\n\tPROPS_IS_LAZY_INITIAL,\n\tPROPS_IS_RUNES,\n\tPROPS_IS_UPDATED\n} from '../../../constants.js';\nimport { get_descriptor, is_function } from '../../shared/utils.js';\nimport { mutable_source, set, source, update } from './sources.js';\nimport { derived, derived_safe_equal } from './deriveds.js';\nimport {\n\tactive_effect,\n\tget,\n\tcaptured_signals,\n\tset_active_effect,\n\tuntrack,\n\tactive_reaction,\n\tset_active_reaction\n} from '../runtime.js';\nimport { safe_equals } from './equality.js';\nimport * as e from '../errors.js';\nimport {\n\tBRANCH_EFFECT,\n\tLEGACY_DERIVED_PROP,\n\tLEGACY_PROPS,\n\tROOT_EFFECT,\n\tSTATE_SYMBOL\n} from '../constants.js';\nimport { proxy } from '../proxy.js';\nimport { capture_store_binding } from './store.js';\nimport { legacy_mode_flag } from '../../flags/index.js';\n\n/**\n * @param {((value?: number) => number)} fn\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_prop(fn, d = 1) {\n\tconst value = fn();\n\tfn(value + d);\n\treturn value;\n}\n\n/**\n * @param {((value?: number) => number)} fn\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_pre_prop(fn, d = 1) {\n\tconst value = fn() + d;\n\tfn(value);\n\treturn value;\n}\n\n/**\n * The proxy handler for rest props (i.e. `const { x, ...rest } = $props()`).\n * Is passed the full `$$props` object and excludes the named props.\n * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, name?: string }>}}\n */\nconst rest_props_handler = {\n\tget(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\treturn target.props[key];\n\t},\n\tset(target, key) {\n\t\tif (DEV) {\n\t\t\t// TODO should this happen in prod too?\n\t\t\te.props_rest_readonly(`${target.name}.${String(key)}`);\n\t\t}\n\n\t\treturn false;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tif (key in target.props) {\n\t\t\treturn {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: target.props[key]\n\t\t\t};\n\t\t}\n\t},\n\thas(target, key) {\n\t\tif (target.exclude.includes(key)) return false;\n\t\treturn key in target.props;\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));\n\t}\n};\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string[]} exclude\n * @param {string} [name]\n * @returns {Record<string, unknown>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function rest_props(props, exclude, name) {\n\treturn new Proxy(\n\t\tDEV ? { props, exclude, name, other: {}, to_proxy: [] } : { props, exclude },\n\t\trest_props_handler\n\t);\n}\n\n/**\n * The proxy handler for legacy $$restProps and $$props\n * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, special: Record<string | symbol, (v?: unknown) => unknown>, version: Source<number> }>}}\n */\nconst legacy_rest_props_handler = {\n\tget(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tget(target.version);\n\t\treturn key in target.special ? target.special[key]() : target.props[key];\n\t},\n\tset(target, key, value) {\n\t\tif (!(key in target.special)) {\n\t\t\t// Handle props that can temporarily get out of sync with the parent\n\t\t\t/** @type {Record<string, (v?: unknown) => unknown>} */\n\t\t\ttarget.special[key] = prop(\n\t\t\t\t{\n\t\t\t\t\tget [key]() {\n\t\t\t\t\t\treturn target.props[key];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/** @type {string} */ (key),\n\t\t\t\tPROPS_IS_UPDATED\n\t\t\t);\n\t\t}\n\n\t\ttarget.special[key](value);\n\t\tupdate(target.version); // $$props is coarse-grained: when $$props.x is updated, usages of $$props.y etc are also rerun\n\t\treturn true;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tif (key in target.props) {\n\t\t\treturn {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: target.props[key]\n\t\t\t};\n\t\t}\n\t},\n\tdeleteProperty(target, key) {\n\t\t// Svelte 4 allowed for deletions on $$restProps\n\t\tif (target.exclude.includes(key)) return true;\n\t\ttarget.exclude.push(key);\n\t\tupdate(target.version);\n\t\treturn true;\n\t},\n\thas(target, key) {\n\t\tif (target.exclude.includes(key)) return false;\n\t\treturn key in target.props;\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));\n\t}\n};\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string[]} exclude\n * @returns {Record<string, unknown>}\n */\nexport function legacy_rest_props(props, exclude) {\n\treturn new Proxy({ props, exclude, special: {}, version: source(0) }, legacy_rest_props_handler);\n}\n\n/**\n * The proxy handler for spread props. Handles the incoming array of props\n * that looks like `() => { dynamic: props }, { static: prop }, ..` and wraps\n * them so that the whole thing is passed to the component as the `$$props` argument.\n * @template {Record<string | symbol, unknown>} T\n * @type {ProxyHandler<{ props: Array<T | (() => T)> }>}}\n */\nconst spread_props_handler = {\n\tget(target, key) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (typeof p === 'object' && p !== null && key in p) return p[key];\n\t\t}\n\t},\n\tset(target, key, value) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tconst desc = get_descriptor(p, key);\n\t\t\tif (desc && desc.set) {\n\t\t\t\tdesc.set(value);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (typeof p === 'object' && p !== null && key in p) {\n\t\t\t\tconst descriptor = get_descriptor(p, key);\n\t\t\t\tif (descriptor && !descriptor.configurable) {\n\t\t\t\t\t// Prevent a \"Non-configurability Report Error\": The target is an array, it does\n\t\t\t\t\t// not actually contain this property. If it is now described as non-configurable,\n\t\t\t\t\t// the proxy throws a validation error. Setting it to true avoids that.\n\t\t\t\t\tdescriptor.configurable = true;\n\t\t\t\t}\n\t\t\t\treturn descriptor;\n\t\t\t}\n\t\t}\n\t},\n\thas(target, key) {\n\t\t// To prevent a false positive `is_entry_props` in the `prop` function\n\t\tif (key === STATE_SYMBOL || key === LEGACY_PROPS) return false;\n\n\t\tfor (let p of target.props) {\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (p != null && key in p) return true;\n\t\t}\n\n\t\treturn false;\n\t},\n\townKeys(target) {\n\t\t/** @type {Array<string | symbol>} */\n\t\tconst keys = [];\n\n\t\tfor (let p of target.props) {\n\t\t\tif (is_function(p)) p = p();\n\t\t\tfor (const key in p) {\n\t\t\t\tif (!keys.includes(key)) keys.push(key);\n\t\t\t}\n\t\t}\n\n\t\treturn keys;\n\t}\n};\n\n/**\n * @param {Array<Record<string, unknown> | (() => Record<string, unknown>)>} props\n * @returns {any}\n */\nexport function spread_props(...props) {\n\treturn new Proxy({ props }, spread_props_handler);\n}\n\n/**\n * This function is responsible for synchronizing a possibly bound prop with the inner component state.\n * It is used whenever the compiler sees that the component writes to the prop, or when it has a default prop_value.\n * @template V\n * @param {Record<string, unknown>} props\n * @param {string} key\n * @param {number} flags\n * @param {V | (() => V)} [fallback]\n * @returns {(() => V | ((arg: V) => V) | ((arg: V, mutation: boolean) => V))}\n */\nexport function prop(props, key, flags, fallback) {\n\tvar immutable = (flags & PROPS_IS_IMMUTABLE) !== 0;\n\tvar runes = !legacy_mode_flag || (flags & PROPS_IS_RUNES) !== 0;\n\tvar bindable = (flags & PROPS_IS_BINDABLE) !== 0;\n\tvar lazy = (flags & PROPS_IS_LAZY_INITIAL) !== 0;\n\tvar is_store_sub = false;\n\tvar prop_value;\n\n\tif (bindable) {\n\t\t[prop_value, is_store_sub] = capture_store_binding(() => /** @type {V} */ (props[key]));\n\t} else {\n\t\tprop_value = /** @type {V} */ (props[key]);\n\t}\n\n\t// Can be the case when someone does `mount(Component, props)` with `let props = $state({...})`\n\t// or `createClassComponent(Component, props)`\n\tvar is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props;\n\n\tvar setter =\n\t\t(bindable &&\n\t\t\t(get_descriptor(props, key)?.set ??\n\t\t\t\t(is_entry_props && key in props && ((v) => (props[key] = v))))) ||\n\t\tundefined;\n\n\tvar fallback_value = /** @type {V} */ (fallback);\n\tvar fallback_dirty = true;\n\tvar fallback_used = false;\n\n\tvar get_fallback = () => {\n\t\tfallback_used = true;\n\t\tif (fallback_dirty) {\n\t\t\tfallback_dirty = false;\n\t\t\tif (lazy) {\n\t\t\t\tfallback_value = untrack(/** @type {() => V} */ (fallback));\n\t\t\t} else {\n\t\t\t\tfallback_value = /** @type {V} */ (fallback);\n\t\t\t}\n\t\t}\n\n\t\treturn fallback_value;\n\t};\n\n\tif (prop_value === undefined && fallback !== undefined) {\n\t\tif (setter && runes) {\n\t\t\te.props_invalid_value(key);\n\t\t}\n\n\t\tprop_value = get_fallback();\n\t\tif (setter) setter(prop_value);\n\t}\n\n\t/** @type {() => V} */\n\tvar getter;\n\tif (runes) {\n\t\tgetter = () => {\n\t\t\tvar value = /** @type {V} */ (props[key]);\n\t\t\tif (value === undefined) return get_fallback();\n\t\t\tfallback_dirty = true;\n\t\t\tfallback_used = false;\n\t\t\treturn value;\n\t\t};\n\t} else {\n\t\t// Svelte 4 did not trigger updates when a primitive value was updated to the same value.\n\t\t// Replicate that behavior through using a derived\n\t\tvar derived_getter = (immutable ? derived : derived_safe_equal)(\n\t\t\t() => /** @type {V} */ (props[key])\n\t\t);\n\t\tderived_getter.f |= LEGACY_DERIVED_PROP;\n\t\tgetter = () => {\n\t\t\tvar value = get(derived_getter);\n\t\t\tif (value !== undefined) fallback_value = /** @type {V} */ (undefined);\n\t\t\treturn value === undefined ? fallback_value : value;\n\t\t};\n\t}\n\n\t// easy mode — prop is never written to\n\tif ((flags & PROPS_IS_UPDATED) === 0) {\n\t\treturn getter;\n\t}\n\n\t// intermediate mode — prop is written to, but the parent component had\n\t// `bind:foo` which means we can just call `$$props.foo = value` directly\n\tif (setter) {\n\t\tvar legacy_parent = props.$$legacy;\n\t\treturn function (/** @type {any} */ value, /** @type {boolean} */ mutation) {\n\t\t\tif (arguments.length > 0) {\n\t\t\t\t// We don't want to notify if the value was mutated and the parent is in runes mode.\n\t\t\t\t// In that case the state proxy (if it exists) should take care of the notification.\n\t\t\t\t// If the parent is not in runes mode, we need to notify on mutation, too, that the prop\n\t\t\t\t// has changed because the parent will not be able to detect the change otherwise.\n\t\t\t\tif (!runes || !mutation || legacy_parent || is_store_sub) {\n\t\t\t\t\t/** @type {Function} */ (setter)(mutation ? getter() : value);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn getter();\n\t\t\t}\n\t\t};\n\t}\n\n\t// hard mode. this is where it gets ugly — the value in the child should\n\t// synchronize with the parent, but it should also be possible to temporarily\n\t// set the value to something else locally.\n\tvar from_child = false;\n\tvar was_from_child = false;\n\n\t// The derived returns the current value. The underlying mutable\n\t// source is written to from various places to persist this value.\n\tvar inner_current_value = mutable_source(prop_value);\n\tvar current_value = derived(() => {\n\t\tvar parent_value = getter();\n\t\tvar child_value = get(inner_current_value);\n\n\t\tif (from_child) {\n\t\t\tfrom_child = false;\n\t\t\twas_from_child = true;\n\t\t\treturn child_value;\n\t\t}\n\n\t\twas_from_child = false;\n\t\treturn (inner_current_value.v = parent_value);\n\t});\n\n\tif (!immutable) current_value.equals = safe_equals;\n\n\treturn function (/** @type {any} */ value, /** @type {boolean} */ mutation) {\n\t\t// legacy nonsense — need to ensure the source is invalidated when necessary\n\t\t// also needed for when handling inspect logic so we can inspect the correct source signal\n\t\tif (captured_signals !== null) {\n\t\t\t// set this so that we don't reset to the parent value if `d`\n\t\t\t// is invalidated because of `invalidate_inner_signals` (rather\n\t\t\t// than because the parent or child value changed)\n\t\t\tfrom_child = was_from_child;\n\t\t\t// invoke getters so that signals are picked up by `invalidate_inner_signals`\n\t\t\tgetter();\n\t\t\tget(inner_current_value);\n\t\t}\n\n\t\tif (arguments.length > 0) {\n\t\t\tconst new_value = mutation ? get(current_value) : runes && bindable ? proxy(value) : value;\n\n\t\t\tif (!current_value.equals(new_value)) {\n\t\t\t\tfrom_child = true;\n\t\t\t\tset(inner_current_value, new_value);\n\t\t\t\t// To ensure the fallback value is consistent when used with proxies, we\n\t\t\t\t// update the local fallback_value, but only if the fallback is actively used\n\t\t\t\tif (fallback_used && fallback_value !== undefined) {\n\t\t\t\t\tfallback_value = new_value;\n\t\t\t\t}\n\t\t\t\tuntrack(() => get(current_value)); // force a synchronisation immediately\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\t\treturn get(current_value);\n\t};\n}\n"],"names":["rest_props_handler","target","key","rest_props","props","exclude","name","spread_props_handler","i","p","is_function","value","desc","get_descriptor","descriptor","STATE_SYMBOL","LEGACY_PROPS","keys","spread_props","prop","flags","fallback","immutable","PROPS_IS_IMMUTABLE","runes","legacy_mode_flag","PROPS_IS_RUNES","bindable","PROPS_IS_BINDABLE","lazy","PROPS_IS_LAZY_INITIAL","is_store_sub","prop_value","capture_store_binding","is_entry_props","setter","_a","v","fallback_value","fallback_dirty","fallback_used","get_fallback","untrack","e.props_invalid_value","getter","derived_getter","derived","derived_safe_equal","LEGACY_DERIVED_PROP","get","PROPS_IS_UPDATED","legacy_parent","mutation","from_child","inner_current_value","mutable_source","current_value","parent_value","child_value","safe_equals","new_value","proxy","set"],"mappings":"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","x_google_ignoreList":[0]}